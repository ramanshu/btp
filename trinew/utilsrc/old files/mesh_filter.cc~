/*
Szymon Rusinkiewicz
Princeton University

mesh_filter.cc
Apply a variety of tranformations to a mesh
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "TriMesh.h"
#include "TriMesh_algo.h"
#include "XForm.h"
using namespace std;

#ifndef M_PI
# define M_PI 3.14159265358979323846
#endif


// Is this argument a floating-point number?
static bool isanumber(const char *c)
{
	if (!c || !*c)
		return false;
	char *endptr;
	strtod(c, &endptr);
	return (endptr && *endptr == '\0');
}


// Is this argument an integer?
static bool isanint(const char *c)
{
	if (!c || !*c)
		return false;
	char *endptr;
	strtol(c, &endptr, 10);
	return (endptr && *endptr == '\0');
}


// Transform the mesh by a matrix read from a file
void apply_xform(TriMesh *mesh, const char *xffilename)
{
	xform xf;
	if (!xf.read(xffilename))
		fprintf(stderr, "Couldn't open %s\n", xffilename);
	else
		apply_xform(mesh, xf);
}


// Transform the mesh by inverse of a matrix read from a file
void apply_ixform(TriMesh *mesh, const char *xffilename)
{
	xform xf;
	if (!xf.read(xffilename)) {
		fprintf(stderr, "Couldn't open %s\n", xffilename);
	} else {
		invert(xf);
		apply_xform(mesh, xf);
	}
}


// Clip mesh to the given bounding box file
bool clip(TriMesh *mesh, const char *bboxfilename)
{
	box b;
	if (!b.read(bboxfilename)) {
		fprintf(stderr, "Couldn't read bounding box %s\n", bboxfilename);
		return false;
	}

	clip(mesh, b);
	return true;
}


void usage(const char *myname)
{
	fprintf(stderr, "Usage: %s infile [options] [outfile]\n", myname);
	fprintf(stderr, "Options:\n");
	fprintf(stderr, "	-color		Add per-vertex color\n");
	fprintf(stderr, "	-nocolor	Remove per-vertex color\n");
	fprintf(stderr, "	-conf		Add per-vertex confidence\n");
	fprintf(stderr, "	-noconf		Remove per-vertex confidence\n");
	fprintf(stderr, "	-tstrip		Convert to use triangle strips\n");
	fprintf(stderr, "	-notstrip	Unpack triangle strips to faces\n");
	fprintf(stderr, "	-nogrid		Unpack range grid to faces\n");
	fprintf(stderr, "	-reorder	Optimize order of vertices\n");
	fprintf(stderr, "	-orient		Auto-orient faces within the mesh\n");
	fprintf(stderr, "	-faceflip	Flip the order of vertices within each face\n");
	fprintf(stderr, "	-edgeflip	Optimize triangle connectivity by flipping edges\n");
	fprintf(stderr, "	-subdiv		Subdivide faces (planar)\n");
	fprintf(stderr, "	-loop		Perform Loop subdivision\n");
	fprintf(stderr, "	-fly		Perform butterfly subdivision\n");
	fprintf(stderr, "	-smooth s	Smooth surface with sigma=s*edgelength\n");
	fprintf(stderr, "	-bilat sd sr	Bilateral surface smoothing with domain, range sigmas\n");
	fprintf(stderr, "	-sharpen s	Sharpen surface with sigma=s*edgelength\n");
	fprintf(stderr, "	-smoothnorm s	Diffuse normals with sigma=s*edgelength\n");
	fprintf(stderr, "	-usmooth n	Perform n iterations of simple umbrella smoothing\n");
	fprintf(stderr, "	-tsmooth n	Perform n iterations of tangent-plane umbrella smoothing\n");
	fprintf(stderr, "	-lmsmooth n	Perform n iterations of Taubin's lambda-mu smoothing\n");
	fprintf(stderr, "	-inflate s	Create offset surface s*edgelength away\n");
	fprintf(stderr, "	-noisify s	Add O(s*edgelength) noise to each vertex\n");
	fprintf(stderr, "	-share tol	Merge (\"share\") vertices within tol*edgelength\n");
	fprintf(stderr, "	-clip bbox	Clip to the given bbox (file has 6 numbers)\n");
	fprintf(stderr, "	-xform file.xf	Transform by the given matrix\n");
	fprintf(stderr, "	-ixform file.xf	Transform by inverse of matrix\n");
	fprintf(stderr, "	-rot r x y z	Rotate r degrees around axis (x,y,z)\n");
	fprintf(stderr, "	-trans x y z	Translate by (x,y,z)\n");
	fprintf(stderr, "	-scale s	Uniform scale by s\n");
	fprintf(stderr, "	-scale x y z	Scale by (x,y,z)\n");
	fprintf(stderr, "	-scale s x y z	Scale by s in direction (x,y,z)\n");
	fprintf(stderr, "	-center		Translate so center of mass is at (0,0,0)\n");
	fprintf(stderr, "	-bbcenter	Translate so center of bbox is at (0,0,0)\n");
	fprintf(stderr, "	-varnorm	Scale so variance (RMS distance) from center is 1\n");
	fprintf(stderr, "	-bbnorm		Scale so bbox has maximum extent 1\n");
	fprintf(stderr, "	-pcarot		Rotate so that principal axes lie along X, Y, Z\n");
	fprintf(stderr, "	-pcasnap	As above, but only rotate by 90/180 degrees\n");
	fprintf(stderr, "	-rmunused	Remove unreferenced vertices\n");
	fprintf(stderr, "	-rmslivers	Remove long, skinny faces\n");
	fprintf(stderr, "	-erode		Enlarge boundaries by removing boundary vertices\n");
	exit(1);
}

int main(int argc, char *argv[])
{
	if (argc < 3)
		usage(argv[0]);
	const char *filename = argv[1];

	TriMesh *themesh = TriMesh::read(filename);
	if (!themesh)
		usage(argv[0]);

	bool have_tstrips = !themesh->tstrips.empty();
//	for (int i = 2; i < argc; i++) {
/* 			int nargs = 0;
			float args[4];
			while (nargs < 4) {
				if (++i >= argc)
					break;
				if (!isanumber(argv[i]) ||
				    !sscanf(argv[i], "%f", &(args[nargs]))) {
					--i;
					break;
				}
				nargs++;
			}
			if (!(i < argc) || nargs == 0 || nargs == 2) {
				fprintf(stderr, "\n-scale requires 1, 3, or 4 arguments\n\n");
				usage(argv[0]);
			}
			xform s = xform::scale(args[0]);
			if (nargs == 3)*/
//				s = xform::scale(args[0], args[1], args[2]);
					s = xform::scale("-1","1","1");
	//		else if (nargs == 4)
		//		s = xform::scale(args[0], args[1], args[2], args[3]);
			apply_xform(themesh, s);
		
			if (have_tstrips && themesh->tstrips.empty())
				themesh->need_tstrips();
			themesh->write(argv[argc-1]);
		
	
}

